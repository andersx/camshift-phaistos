// camshift_data.h -- Parameters for the camshift energy term.
// This is the parameters from the Camshift 1.35 program,
// which differ from the ones in the actual paper.
// 
// Copyright (C) 2011 by Anders Steen Christensen, Wouter Boomsma
//
// This file is part of Phaistos
//
// Phaistos is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Phaistos is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Phaistos.  If not, see <http://www.gnu.org/licenses/>.

#ifndef CAMSHIFT_DATA
#define CAMSHIFT_DATA

#include "energy/energy_term.h"
#include <boost/type_traits/is_base_of.hpp>
#include <boost/assign/list_of.hpp>
#include <iostream>
#include <vector>
#include <math.h>
#include <cmath>
#include <string.h>
#include "protein/chain_fb.h"
#include "protein/definitions.h"
#include "energy/energy.h"
#include "energy/camshift.h"

using namespace phaistos;
using namespace definitions;

namespace camshift_constants {

const std::vector<AtomEnum> regular_donor_atom_types      = vector_utils::make_vector(H,   H1,  H2,  H3);
const std::vector<AtomEnum> regular_donor_connected_atoms = vector_utils::make_vector(N,   N,   N,   N);

const std::vector<AtomEnum> regular_acceptor_atom_types      = vector_utils::make_vector(O,   N,   OXT);
const std::vector<AtomEnum> regular_acceptor_connected_atoms = vector_utils::make_vector(C,   C,   C);

const std::vector<ResidueEnum> sc_donor_residues     = vector_utils::make_vector(SER, THR, TYR, ASN,  ASN,  GLN,  GLN,  HIS, HIS, LYS, LYS, LYS, ARG,  ARG,  ARG,  ARG);
const std::vector<AtomEnum> sc_donor_atoms_types     = vector_utils::make_vector(HG,  HG1, HH,  HD21, HD22, HE21, HE22, HD1, HE2, HZ1, HZ2, HZ3, HH11, HH21, HH12, HH22);
const std::vector<AtomEnum> sc_donor_connected_atoms = vector_utils::make_vector(OG,  OG1, OH,  ND2,  ND2,  NE2,  NE2,  ND1, NE2, NZ,  NZ,  NZ,  NH1,  NH1,  NH2,  NH2);

const std::vector<ResidueEnum> sc_acceptor_residues     = vector_utils::make_vector(SER, THR, TYR, ASN, GLN, ASP, ASP, GLU, GLU);
const std::vector<AtomEnum> sc_acceptor_atoms_types     = vector_utils::make_vector(OG,  OG1, OH,  OD1, OE1, OD1, OD2, OE1, OE2);
const std::vector<AtomEnum> sc_acceptor_connected_atoms = vector_utils::make_vector(CB,  CB,  CZ,  CG,  CD,  CG,  CG,  CD,  CD );



std::vector<double> ss_bond_coefficients = vector_utils::make_vector( 0.011555153204883891 , -2.851700383944911 , -0.10605544569039109 , -1.4131441517517331 , -0.37088135408255857 , 11.361637372067898 );


const std::vector< std::vector<double> > power_minus_3_sp3_coefficients_STD = vector_utils::make_vector(
vector_utils::make_vector( -2.9677854218318016, -10.347270858368276 ,-5.381324807117669 , -70.57316993796852 , 2.7653856090154982 , -14.772311956621978 ),
vector_utils::make_vector(  0.671565238061677,    3.450707081013336 ,1.4552245137358921 , 34.69758894788705 , 1.232025943700639 , 4.8997052958852105 ),
vector_utils::make_vector( -1.6214566324137984, -12.5982466223797 , 2.505391454472044 , -88.71419716149445 , 31.32384112711744 , -14.86605302072972 ),
vector_utils::make_vector(  0.13517999663882513, -3.5664649776195554 , 3.3033813020525264 , 15.271538038229991 , 31.172000909193187 , -4.189887175682491 ),
vector_utils::make_vector(  6.275799974169214, -101.81223165473585 , -0.8774167747629915 , 89.18257287053987 , 0.46315015978232393 , 25.290699879146132 ));

const std::vector< std::vector<double> > power_minus_3_sp2_coefficients_STD = vector_utils::make_vector(
vector_utils::make_vector( -0.20351043093982915, -9.754432952768152 , -14.432589744681705 , -43.34560180380588 , -27.917719815521252 , -1.6619941862134497 ),
vector_utils::make_vector(  1.2355083351941172,  -9.628534199158775 , 17.498842030092842 , 78.05125884403317 , 40.25708258918623 , 0.7461717480347501 ),
vector_utils::make_vector(  8.182942738787164,   -8.649509334546984 , 9.140798607308529 , 53.27459290093175 , 24.047756828193904 , -9.21507952586192 ));


const std::vector< std::vector<double> > power_minus_3_sp3_coefficients_GLY = vector_utils::make_vector(
vector_utils::make_vector( -3.0168132206326201 , -8.5977612315663663 , -5.8425337663422932 , -71.5911952645416392 , 2.8434093325683931 , 0.0000000000000000 ),
vector_utils::make_vector( 0.6934660792315268 , 3.4918232206732189 , 1.4585048429702292 , 34.9500047871303181 , 1.1159713726365932 , 0.0000000000000000 ),
vector_utils::make_vector( -1.5118058348354597 , -11.6825206167860607 , 1.0705716803535279 , -84.7947603494997537 , 31.2080907624559600 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0116202683261451 , -2.7975315048098603 , 2.9867520336872828 , 15.4156559704698228 , 33.0734988620999530 , 0.0000000000000000 ),
vector_utils::make_vector( 6.0126234618484533 , -90.0455354082495347 , -0.9345985095512087 , 92.2168676719532101 , 2.2352785344174739 , 0.0000000000000000 ));
const std::vector< std::vector<double> > power_minus_3_sp2_coefficients_GLY = vector_utils::make_vector(
vector_utils::make_vector( 0.0261762523847436 , -4.6399330961379093 , -12.2287228009680558 , -35.7631624888671809 , -23.2998679033744480 , 0.0000000000000000 ),
vector_utils::make_vector( 1.7596831881781203 , -24.1547967042352134 , 17.0967107013221487 , 93.8333369962513899 , 45.9211174848769161 , 0.0000000000000000 ),
vector_utils::make_vector( 7.5153250055664857 , -8.1137498172680758 , 8.5922144532888520 , 52.8186525570455032 , 24.2391177129099766 , 0.0000000000000000 ));


const std::vector< std::vector<double> > power_minus_3_sp3_coefficients_PRO = vector_utils::make_vector(
vector_utils::make_vector( -2.8890317947476105 , -11.5701183504619376 , 0.0000000000000000 , 0.0000000000000000 , 0.7454208604152885 , -15.4339191816303973 ),
vector_utils::make_vector( 0.6781449975559071 , 3.8625409177420713 , 0.0000000000000000 , 0.0000000000000000 , 1.5414621184550050 , 4.9592400981560170 ),
vector_utils::make_vector( -1.6775878941427678 , -14.3054724355278484 , 0.0000000000000000 , 0.0000000000000000 , 30.4421396285314216 , -13.2850125698609531 ),
vector_utils::make_vector( 0.1396715168585968 , -3.2341673003651050 , 0.0000000000000000 , 0.0000000000000000 , 31.0048115162175151 , -3.7517901842673012 ),
vector_utils::make_vector( 6.1752519285985095 , -97.7775559481696064 , 0.0000000000000000 , 0.0000000000000000 , -0.1268802813206794 , 23.3408457747261977 ));
const std::vector< std::vector<double> > power_minus_3_sp2_coefficients_PRO = vector_utils::make_vector(
vector_utils::make_vector( -0.0160993947579784 , -10.4773986216893746 , 0.0000000000000000 , 0.0000000000000000 , -29.3726275624834905 , -1.8753940901269193 ),
vector_utils::make_vector( 1.0437019234227876 , -5.6041119442661893 , 0.0000000000000000 , 0.0000000000000000 , 29.9173363348794972 , -4.3841389425860244 ),
vector_utils::make_vector( 8.0417551403179921 , -8.5759150368419235 , 0.0000000000000000 , 0.0000000000000000 , 24.7418252027886290 , -8.6329324566801020 ));


const std::vector< std::vector<double> > power_1_sp3_coefficients_STD = vector_utils::make_vector(
vector_utils::make_vector( 0.0026980777380174 , 0.0340218076597632 , -0.0069550340003526 , -0.0305132227816947 , -0.0149591395830326 , 0.0439204571490100 ),
vector_utils::make_vector( -0.0035562744365679 , -0.0049690317072318 , 0.0116062321032106 , -0.1324913929510944 , -0.0314517184116281 , -0.0111143480007445 ),
vector_utils::make_vector( 0.0093801308883551 , 0.0474206178407343 , -0.0631762765360979 , 0.3450077717420807 , -0.0069306876125918 , 0.0437226469304904 ),
vector_utils::make_vector( 0.0013891776050714 , 0.0041548721344522 , 0.0012358379582019 , 0.0854749530005921 , -0.0624505405391126 , -0.0125878186407877 ),
vector_utils::make_vector( -0.0326841604227400 , 0.3592450001842794 , 0.0129472028747584 , -0.3312136022598206 , -0.0197605274467603 , -0.0793473334154241 ));
const std::vector< std::vector<double> > power_1_sp2_coefficients_STD = vector_utils::make_vector(
vector_utils::make_vector( -0.0060841412003716 , 0.0254618129385003 , 0.0352599885419553 , 0.0402185164270435 , 0.0658225687924841 , 0.0122429462108456 ),
vector_utils::make_vector( -0.0204518866709478 , 0.0257896928598489 , -0.0491207594609957 , -0.2553769514425676 , -0.0809802787963923 , -0.0353701055172424 ),
vector_utils::make_vector( -0.0380542632940253 , 0.0448192447937817 , -0.0283907349785015 , -0.1847889936482979 , -0.1061224078965686 , 0.0309462023985530 ));

const std::vector< std::vector<double> > power_1_sp3_coefficients_GLY = vector_utils::make_vector(
vector_utils::make_vector( 0.0019264717822498 , 0.0309128772661786 , -0.0054203863271885 , -0.0207984006090474 , -0.0151925114594120 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0031883766817039 , -0.0067515429379451 , 0.0121695556187617 , -0.1312017526068961 , -0.0307875129628472 , 0.0000000000000000 ),
vector_utils::make_vector( 0.0084884818340617 , 0.0471440723212129 , -0.0599493431735166 , 0.3297394961000978 , -0.0085599343545507 , 0.0000000000000000 ),
vector_utils::make_vector( 0.0018811759493966 , -0.0014212249014815 , 0.0013844651725935 , 0.0865618582684383 , -0.0690416452389158 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0323830071515205 , 0.3254298524169774 , 0.0090493985377423 , -0.3311425776430222 , -0.0239321306378119 , 0.0000000000000000 ));
const std::vector< std::vector<double> > power_1_sp2_coefficients_GLY = vector_utils::make_vector(
vector_utils::make_vector( -0.0072227598409180 , 0.0120399256858485 , 0.0281910910647572 , 0.0224531804134379 , 0.0527579647292673 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0251184784903051 , 0.0727874760361857 , -0.0591580757827286 , -0.3550118766610906 , -0.0906942068848875 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0346208537782999 , 0.0412070552988399 , -0.0269135224034520 , -0.1633651635005118 , -0.1020419281899392 , 0.0000000000000000 ));

const std::vector< std::vector<double> > power_1_sp3_coefficients_PRO = vector_utils::make_vector(
vector_utils::make_vector( 0.0023438824044885 , 0.0353138525705945 , 0.0000000000000000 , 0.0000000000000000 , -0.0095636282181957 , 0.0451318684682797 ),
vector_utils::make_vector( -0.0037569403178147 , -0.0063922592966343 , 0.0000000000000000 , 0.0000000000000000 , -0.0329767653695871 , -0.0118420722727012 ),
vector_utils::make_vector( 0.0097002786444334 , 0.0538909578174844 , 0.0000000000000000 , 0.0000000000000000 , -0.0036915462015988 , 0.0376911005968920 ),
vector_utils::make_vector( 0.0009191341020309 , 0.0031996855595238 , 0.0000000000000000 , 0.0000000000000000 , -0.0619811254617135 , -0.0114162034368302 ),
vector_utils::make_vector( -0.0327975121680781 , 0.3482810222512587 , 0.0000000000000000 , 0.0000000000000000 , -0.0211073880998749 , -0.0723428687287950 ));
const std::vector< std::vector<double> > power_1_sp2_coefficients_PRO = vector_utils::make_vector(
vector_utils::make_vector( -0.0070155824454568 , 0.0257927879915568 , 0.0000000000000000 , 0.0000000000000000 , 0.0698801251001801 , 0.0110031858176522 ),
vector_utils::make_vector( -0.0190642956009872 , 0.0141752603136959 , 0.0000000000000000 , 0.0000000000000000 , -0.0497685703831869 , -0.0161534287595733 ),
vector_utils::make_vector( -0.0374516166245494 , 0.0469155415729522 , 0.0000000000000000 , 0.0000000000000000 , -0.1080707774201892 , 0.0300655474159266 ));


const std::vector<AtomEnum> extra_distances_atoms_a = boost::assign::list_of(H)(H)(H)(C)(C)(C)(O)(O)(O)(N)(N)(N)(O)(O)(O)(N)(N)(N)(CG)(CG)(CG)(CG)(CG)(CG)(CG)(CA);
const std::vector<AtomEnum> extra_distances_atoms_a_has_CG1 = boost::assign::list_of(H)(H)(H)(C)(C)(C)(O)(O)(O)(N)(N)(N)(O)(O)(O)(N)(N)(N)(CG1)(CG1)(CG1)(CG1)(CG1)(CG1)(CG1)(CA);

const std::vector<int>      extra_distances_index_a = boost::assign::list_of(0)(0)(0)(-1)(-1)(-1)(0)(0)(0)(1)(1)(1)(-1)(-1)(-1)(0)(0)(0)(0)(0)(0)(0)(0)(-1)(1)(-1);
const std::vector<AtomEnum> extra_distances_atoms_b = boost::assign::list_of(HA)(C)(CB)(HA)(C)(CB)(HA)(N)(CB)(HA)(N)(CB)(HA)(N)(CB)(HA)(N)(CB)(HA)(N)(C)(C)(N)(CA)(CA)(CA);
const std::vector<int>      extra_distances_index_b = boost::assign::list_of(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(-1)(-1)(-1)(-1)(-1)(-1)(0)(0)(0)(-1)(1)(0)(0)(1);

const std::vector< std::vector<double> > extra_distances_coefficients_STD = boost::assign::list_of
(vector_utils::make_vector( -0.2327537725120168 , -0.7434610853336412 , 0.0647726567487617 , 15.4137967310168911 , 2.1192318433573578 , -1.4828647529928054 ))
(vector_utils::make_vector( 0.4706843408840760 , -2.9678514938888858 , 0.3561690255622046 , -0.5081131040968113 , -0.3422196467049536 , 1.2635546824752146 ))
(vector_utils::make_vector( 0.1105157787599514 , 0.2527170538887184 , 0.4513891758262973 , 4.0841294344719596 , -0.5979143208127689 , -0.7675619677298110 ))
(vector_utils::make_vector( -0.2457149739239131 , -0.5493254061022271 , -0.1247353675950577 , 5.3175934476774236 , 1.4109850862368405 , 0.3151978153183097 ))
(vector_utils::make_vector( 0.6633010877903336 , -4.4043651876098560 , -0.7657827672601321 , -7.0572238382510930 , -1.8892011658375061 , 1.6521006663798627 ))
(vector_utils::make_vector( 0.1545140713173383 , -0.6886219316678216 , -0.1308587691975604 , -0.3235056665379997 , 0.6930223828283818 , -1.2033669179017203 ))
(vector_utils::make_vector( 0.1744758367822920 , -7.0504320420574054 , 0.1035088842582061 , -2.3941223792469768 , -1.3898243212722541 , 0.3167063375483198 ))
(vector_utils::make_vector( -0.4090631481129505 , 2.5129778529365119 , 0.6346262664676826 , 4.2262422240340154 , 1.7159429613823565 , -0.3455520347053589 ))
(vector_utils::make_vector( 0.0299335673716104 , 0.5613172842067488 , 0.0991564655803196 , 1.1221295068053800 , 0.1724716711103781 , 1.2120660376298542 ))
(vector_utils::make_vector( 0.0455485671890059 , -6.1961190017656183 , 0.1243992033405712 , -5.4083632273240712 , -0.2092066411134598 , 0.6101992441063459 ))
(vector_utils::make_vector( -0.2246818754758864 , 0.5916957565713907 , -0.0851907181209131 , 1.0503017607251885 , 1.2968192526928011 , -2.2062331209948525 ))
(vector_utils::make_vector( -0.0349462673775181 , 0.0887912775766414 , -0.0992273711873738 , -1.2712688509122840 , -0.0724524135568374 , 1.1441298857322129 ))
(vector_utils::make_vector( -0.1545062103968241 , 0.9721612856060365 , -0.4524308860083164 , -1.1365341311411681 , -0.5756206289092207 , -0.5670727612993436 ))
(vector_utils::make_vector( -0.2047421411757797 , -0.0910650806222269 , -0.4601405301186629 , -1.2419221807968472 , 0.2337041918213795 , -0.2115382959316337 ))
(vector_utils::make_vector( -0.0351304384086354 , 0.0416089255698555 , 0.0069608179960474 , -2.3622364702632010 , 0.2051320422404827 , 0.0624314523948168 ))
(vector_utils::make_vector( -0.1740476416117606 , 3.0052240947850835 , 1.3906446457831623 , -3.3287316816388861 , 0.0626518943452928 , -1.2740244469784334 ))
(vector_utils::make_vector( -0.1117979386963426 , 0.4661329374761521 , 0.8949211859105343 , -0.9896087901725740 , 0.3919709345295864 , 0.3155754143520899 ))
(vector_utils::make_vector( 0.0189609159083679 , 0.0051997123788217 , -0.0271163471489476 , 2.1847223244122040 , -0.1618807699177759 , -0.1044842614415138 ))
(vector_utils::make_vector( 0.1288138071282316 , -0.8250044235328394 , 0.0271430081218991 , 0.6921567390642597 , 0.0426615014638617 , -0.3201528219430570 ))
(vector_utils::make_vector( -0.0763196898939289 , -0.0433575471816446 , 0.1319915809295447 , 2.8791465161690728 , -0.1113439214177074 , 0.2273767073602392 ))
(vector_utils::make_vector( -0.1053257468091515 , 0.0469573987284508 , -0.0870100953054445 , 1.8044618730922539 , 0.0823026106999565 , -0.1843615877583412 ))
(vector_utils::make_vector( 0.0026591313498802 , -0.0793622958161787 , -0.0520901281365459 , 0.3628150267198967 , 0.0017187447663842 , -0.0786781253506630 ))
(vector_utils::make_vector( 0.0421798433262992 , -0.1619191930514815 , 0.0506248037111852 , -0.2754379070644002 , 0.0777307639166609 , 0.0508142295426293 ))
(vector_utils::make_vector( 0.0042209141405529 , -0.0016555104686380 , 0.0111822175134794 , -0.1476943571603808 , -0.0103181247020340 , 0.0103662738559297 ))
(vector_utils::make_vector( 0.0009935017699962 , 0.0177660859563433 , -0.0039801815004682 , 0.0286774166909111 , -0.0373196371069573 , 0.0036421820103526 ))
(vector_utils::make_vector( -0.0904906735392931 , 0.6891160788369899 , -0.0285187624652892 , -1.2469407664390031 , 0.5263285745529277 , 1.0999049802374714 ));

const std::vector< std::vector<double> > extra_distances_coefficients_GLY = boost::assign::list_of
(vector_utils::make_vector( -0.1629660879578154 , -0.1483797747953240 , 0.0135944020923718 , 8.7668470418514595 , 2.1013204141613575 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.4122232156105253 , -4.2093754717995475 , 0.5119418768961846 , -6.7520934039224638 , 0.3813989161701857 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.0651481396025584 , 0.2987554336382480 , 0.0891024304586266 , 5.6900611480768566 , 0.7835695910792380 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.5298099238829752 , -4.9560248207833411 , -0.9512783189490216 , -8.4671022239089471 , -0.8618283357491325 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0989332703943787 , -7.3344971907267054 , 0.0778165301875332 , -4.6575886335819172 , -0.8408603976060409 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.3374989576241305 , 3.5153174200856250 , 1.0217623617194076 , 3.4703764569864619 , 0.6362337246919650 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.0386912071139531 , -5.2279072056591520 , 0.0624355082482967 , -5.4231033415002017 , -0.1365514601895311 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.0449491497704767 , 2.1436292531610763 , 0.4497397629487193 , 1.1213514406428948 , -0.0124586373093357 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.1476901931001798 , 1.2056681155476945 , -0.3407769528552644 , -2.5179140366808772 , -0.3631720081855059 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.1780502829291453 , -0.1273926966023250 , -0.4324140572337213 , -1.1224459374490521 , 0.2225914090834448 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.0321439328360841 , -0.0121416754740498 , 0.0164976044653692 , -2.2819998469373064 , 0.1328632237671451 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.1467708067264057 , 2.8171413876456652 , 1.1421495179214447 , -3.7811287100029438 , 0.2795179961673692 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.0704203404476200 , 0.4414006003316404 , 0.8694494892505105 , -0.7475809368928292 , 0.4309026191323034 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0173538235824999 , 0.0600870906814004 , -0.0325651428253483 , 2.1044601588681005 , -0.0954738673195357 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.1217622490346982 , -0.9510271084838251 , 0.0289929562593090 , 0.3537814446416290 , 0.1096560053028174 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.0964119730694710 , -0.0116970105092207 , 0.2195153741026231 , 2.1215038224566860 , -0.1739344712760591 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.0905658306998866 , 0.0338832375804748 , -0.0730184384201802 , 1.9813139227624561 , 0.1401973762154448 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0240178060514893 , 0.0879132508231772 , -0.1232098585884028 , 1.0299103523376973 , 0.0526460225780781 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0367706019245998 , -0.0177006872483904 , 0.0122125584239812 , -0.5722059232934242 , -0.0112692563064339 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0040346917842457 , -0.0018201300216423 , 0.0107078420567873 , -0.1536395549761233 , -0.0100843594982366 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0013450652068098 , 0.0164845077572907 , -0.0026208560644205 , 0.0327524943759222 , -0.0375761740996758 , 0.0000000000000000 ))
(vector_utils::make_vector( -0.1203359210267845 , 0.6912473250160516 , -0.0638527469972065 , -1.0492796885051128 , 0.6711163259352118 , 0.0000000000000000 ));

const std::vector< std::vector<double> > extra_distances_coefficients_PRO = boost::assign::list_of
(vector_utils::make_vector( 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 , 0.0000000000000000 ))
(vector_utils::make_vector( 0.0239546070093792 , 0.0550619291101005 , 0.0000000000000000 , 0.0000000000000000 , -0.1309366834384617 , 0.6047780526346567 ))
(vector_utils::make_vector( 0.3639351437239245 , -1.8245109027177915 , 0.0000000000000000 , 0.0000000000000000 , -2.1589940685644833 , 1.0117690661696346 ))
(vector_utils::make_vector( 0.0601703000917738 , -1.1517461485226208 , 0.0000000000000000 , 0.0000000000000000 , 1.4440016177756672 , -0.4773940874763352 ))
(vector_utils::make_vector( 0.0466054255039325 , -7.9758753300570859 , 0.0000000000000000 , 0.0000000000000000 , -0.4737369164625927 , -0.4937453990708136 ))
(vector_utils::make_vector( 0.0608191710231485 , 0.0143416172460093 , 0.0000000000000000 , 0.0000000000000000 , 0.4166166517848814 , 1.2381646264022119 ))
(vector_utils::make_vector( -0.0032264572991822 , 0.1775679744800904 , 0.0000000000000000 , 0.0000000000000000 , 0.3098537727902358 , 0.9686944837680708 ))
(vector_utils::make_vector( -0.3380020580500724 , -7.1442735168864777 , 0.0000000000000000 , 0.0000000000000000 , 0.4825454184870776 , -0.0596234468168744 ))
(vector_utils::make_vector( 0.2101381408560941 , -1.4483086386065451 , 0.0000000000000000 , 0.0000000000000000 , 0.2440395105761634 , -0.0988846037284349 ))
(vector_utils::make_vector( -0.1088596362485086 , -0.1018623188324688 , 0.0000000000000000 , 0.0000000000000000 , 0.0799778073459886 , 0.4910314729394740 ))
(vector_utils::make_vector( -0.1535562092477574 , 0.9541830622950379 , 0.0000000000000000 , 0.0000000000000000 , -0.3530592544539594 , -0.1998448411620676 ))
(vector_utils::make_vector( -0.1617152999613833 , -0.0384508598870689 , 0.0000000000000000 , 0.0000000000000000 , 0.2598647672909007 , -0.2514972530364841 ))
(vector_utils::make_vector( -0.0505202191565388 , 0.0836813644168335 , 0.0000000000000000 , 0.0000000000000000 , 0.2533118226994268 , -0.0657324718258651 ))
(vector_utils::make_vector( -0.1062667395468319 , 2.7549949272350975 , 0.0000000000000000 , 0.0000000000000000 , 0.1927719443770226 , -0.5980128558748155 ))
(vector_utils::make_vector( -0.0340522976217987 , 0.2772182923887471 , 0.0000000000000000 , 0.0000000000000000 , 0.2516512019394374 , 0.3699693528990440 ))
(vector_utils::make_vector( 0.0358332568979297 , -0.0347704326109241 , 0.0000000000000000 , 0.0000000000000000 , -0.2073699162699771 , 0.0312340289707059 ))
(vector_utils::make_vector( 0.1186277785441283 , -0.5677036030926381 , 0.0000000000000000 , 0.0000000000000000 , 0.0794325445084602 , -0.2584041332659406 ))
(vector_utils::make_vector( -0.0881743953243073 , 0.4042955995484044 , 0.0000000000000000 , 0.0000000000000000 , -0.1171540354519404 , 0.2484874316523023 ))
(vector_utils::make_vector( -0.0746941675855248 , 0.3357446539962703 , 0.0000000000000000 , 0.0000000000000000 , -0.0332108269138727 , -0.0766511661101567 ))
(vector_utils::make_vector( 0.0187257774794178 , -0.1100215545273272 , 0.0000000000000000 , 0.0000000000000000 , 0.0023606182148274 , -0.1109009283261021 ))
(vector_utils::make_vector( 0.0290884104137601 , -0.1050780287569367 , 0.0000000000000000 , 0.0000000000000000 , 0.0711681169652281 , -0.0354933744489521 ))
(vector_utils::make_vector( 0.0042967900276731 , -0.0012084724186183 , 0.0000000000000000 , 0.0000000000000000 , -0.0091117155655707 , 0.0070465455445207 ))
(vector_utils::make_vector( 0.0011090333472978 , 0.0159162058946135 , 0.0000000000000000 , 0.0000000000000000 , -0.0382255838118731 , 0.0025660340838680 ))
(vector_utils::make_vector( -0.1514722682827673 , 0.7027407925859808 , 0.0000000000000000 , 0.0000000000000000 , 0.4796895622273615 , 0.3278770960547636 ));




const std::vector< std::vector< std::vector<double> > > h_bond_coefficients_STD = vector_utils::make_vector(
vector_utils::make_vector( vector_utils::make_vector( -0.0000000282031338 , -0.0000051459799364 , -0.0000001002522573 , -0.0000752745753528 , 0.0000084841881732 , 0.0000330236310932 ),
                           vector_utils::make_vector( -0.0005796092307362 , 0.0014532119467173 , -0.0012311624022499 , -0.0180410727641283 , 0.0039887352818585 , -0.0016325720526212 ),
                           vector_utils::make_vector( 0.0000686553425565 , -0.0001394025443860 , 0.0001250681663690 , 0.0018754630721178 , -0.0003916994112879 , 0.0001679474713272 )),
vector_utils::make_vector( vector_utils::make_vector( -0.0013889802066820 , 0.0030282694262701 , -0.0142871939850155 , -0.0134281396500305 , -0.0043335916047355 , -0.0066043027709330 ),
                           vector_utils::make_vector( 0.0001070501148444 , 0.0010660900640405 , 0.0044821168104993 , 0.0003982251798295 , -0.0004836765647620 , 0.0007734107517706 ),
                           vector_utils::make_vector( -0.0000005551578196 , -0.0001326314352363 , -0.0005105895005538 , -0.0001003438625951 , 0.0000546422621182 , -0.0000318020014415 )),
vector_utils::make_vector( vector_utils::make_vector( 0.0000011417579155 , -0.0000256866868294 , -0.0000054716349377 , -0.0000844009120467 , -0.0000169265202408 , -0.0000179063769460 ),
                           vector_utils::make_vector( 0.0003083994895787 , -0.0002917964674914 , 0.0002329421369477 , 0.0065627266457234 , -0.0113520436298094 , 0.0011680222668516 ),
                           vector_utils::make_vector( -0.0000280821315678 , 0.0000327703163447 , -0.0000156712360578 , -0.0006374109394798 , 0.0011652744395562 , -0.0001242807958497 )),
vector_utils::make_vector( vector_utils::make_vector( -0.0017768919557690 , -0.0052441212511289 , 0.0011321302112831 , -0.0155729317173500 , -0.0077359544686689 , 0.0017154808305490 ),
                           vector_utils::make_vector( 0.0008554647881461 , 0.0034480724272731 , 0.0001720228176968 , 0.0117727937978073 , 0.0057129845096505 , -0.0008403160975657 ),
                           vector_utils::make_vector( -0.0000814664661662 , -0.0003803280002150 , -0.0000099656455333 , -0.0012193090771868 , -0.0005442838122521 , 0.0001072639494233 )));


const std::vector< std::vector< std::vector<double> > > h_bond_coefficients_GLY= vector_utils::make_vector(
vector_utils::make_vector(vector_utils::make_vector( -0.0000002907998082 , -0.0000070177061944 , -0.0000007273745671 , -0.0000841575845031 , 0.0000098869044542 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0004180100097135 , 0.0006044429279232 , -0.0012923575808506 , -0.0165728030779645 , 0.0046344365289007 , 0.0000000000000000 ),
vector_utils::make_vector( 0.0000524628403872 , -0.0000456608878495 , 0.0001313086596696 , 0.0017066638062792 , -0.0004593446433759 , 0.0000000000000000 )),
vector_utils::make_vector(vector_utils::make_vector( -0.0012570388298104 , 0.0030458713515906 , -0.0148477330964459 , -0.0126117427072834 , -0.0049752912287264 , 0.0000000000000000 ),
vector_utils::make_vector( 0.0001397845684297 , 0.0013572506381385 , 0.0051241668162604 , 0.0018564569337559 , -0.0006142031644329 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0000042557898327 , -0.0001635560693932 , -0.0005738568836810 , -0.0002635919015118 , 0.0000670366993476 , 0.0000000000000000 )),
vector_utils::make_vector(vector_utils::make_vector( 0.0000014725572145 , -0.0000247184070314 , -0.0000060065649580 , -0.0000794896305481 , -0.0000164974714709 , 0.0000000000000000 ),
vector_utils::make_vector( 0.0001921141655518 , -0.0002636912353991 , 0.0000222387717641 , 0.0055338945175952 , -0.0107069106983101 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0000161150368114 , 0.0000302841690449 , 0.0000062936785942 , -0.0005243670721043 , 0.0010977683921230 , 0.0000000000000000 )),
vector_utils::make_vector(vector_utils::make_vector( -0.0018399329804009 , -0.0050053132046419 , 0.0009498252012831 , -0.0132877536077687 , -0.0099267518393381 , 0.0000000000000000 ),
vector_utils::make_vector( 0.0009026529159328 , 0.0030799557668725 , 0.0000924936133315 , 0.0128629377173893 , 0.0060277767350753 , 0.0000000000000000 ),
vector_utils::make_vector( -0.0000829599350187 , -0.0003454358375957 , -0.0000008880923924 , -0.0013345402404848 , -0.0005737432137242 , 0.0000000000000000 )));

const std::vector< std::vector< std::vector<double> > > h_bond_coefficients_PRO = vector_utils::make_vector(
vector_utils::make_vector(vector_utils::make_vector( 0.0000000106947203 , -0.0000066945147632 , 0.0000000000000000 , 0.0000000000000000 , 0.0000089512754299 , 0.0000346923811024 ),
vector_utils::make_vector( -0.0005608301904310 , 0.0019834235716826 , 0.0000000000000000 , 0.0000000000000000 , 0.0044441638082640 , -0.0018972339169418 ),
vector_utils::make_vector( 0.0000672189906481 , -0.0001936593201240 , 0.0000000000000000 , 0.0000000000000000 , -0.0004372503594996 , 0.0001955533087025 )),
vector_utils::make_vector(vector_utils::make_vector( -0.0015128903636177 , 0.0025175897509730 , 0.0000000000000000 , 0.0000000000000000 , -0.0047887658717855 , -0.0068371581160723 ),
vector_utils::make_vector( -0.0000259144335337 , 0.0012989286901516 , 0.0000000000000000 , 0.0000000000000000 , -0.0003294881360286 , 0.0003867080201581 ),
vector_utils::make_vector( 0.0000134161951462 , -0.0001582132333663 , 0.0000000000000000 , 0.0000000000000000 , 0.0000370795205770 , 0.0000096417907864 )),
vector_utils::make_vector(vector_utils::make_vector( 0.0000018908643448 , -0.0000261455624599 , 0.0000000000000000 , 0.0000000000000000 , -0.0000179151464139 , -0.0000185711861684 ),
vector_utils::make_vector( 0.0002190356238162 , -0.0001292765912899 , 0.0000000000000000 , 0.0000000000000000 , -0.0111638832644578 , 0.0010705356847401 ),
vector_utils::make_vector( -0.0000187068507559 , 0.0000161586584846 , 0.0000000000000000 , 0.0000000000000000 , 0.0011469379498378 , -0.0001135069597227 )),
vector_utils::make_vector(vector_utils::make_vector( -0.0018291025863550 , -0.0047665783071595 , 0.0000000000000000 , 0.0000000000000000 , -0.0083926274754037 , 0.0016026400494938 ),
vector_utils::make_vector( 0.0007124126448637 , 0.0034823348669143 , 0.0000000000000000 , 0.0000000000000000 , 0.0057975109256993 , -0.0005457902539527 ),
vector_utils::make_vector( -0.0000661277852664 , -0.0003854114909012 , 0.0000000000000000 , 0.0000000000000000 , -0.0005542868984875 , 0.0000763639059674 )));


//   			     p1,	p2,		p3,		p4,		p5,		r,		s
const std::vector< std::vector<double> > h_bond_parameters = vector_utils::make_vector(
vector_utils::make_vector(-0.403531,    13.914800,      -0.421725,      -3.080160,      0.987251,       3.000000,       -16.500000), //d
vector_utils::make_vector(15.048600,	-1.794690,	-1.794690,	1.493980,	1.493980,	15.500000,	2.500000), // g1
vector_utils::make_vector(12.151400,	-1.122580,	-1.122580,	1.309530,	1.309530,	15.500000,	3.000000)); //g2


const std::vector< std::vector< std::vector<double> > > dihedral_angle_data = vector_utils::make_vector(

vector_utils::make_vector(
vector_utils::make_vector(0.3,	0.4,	0.0,	0.1,	3.0),
vector_utils::make_vector(-0.170287,	0.278618,	0.0609298,	2.48692,	-3.07025),
vector_utils::make_vector(-0.0244394,	-0.137248,	0.0560274,	-5.42115,	2.27543)),

vector_utils::make_vector(
vector_utils::make_vector(1.5,	-3.0,	0.0,	2.45,	-2.7),
vector_utils::make_vector(-0.4,	-1.5,	0.7,	4.8,	-8.4),
vector_utils::make_vector(0.1,	0.9,	0.6,	-6.0,	2.2)),

vector_utils::make_vector(
vector_utils::make_vector(-0.4,	-0.3,	0.2,	3.6,	-3.4),
vector_utils::make_vector(-0.104686,	0.174676,	0.0639679,	3.51401,	-2.82811),
vector_utils::make_vector(0.0343048,	0.0448763,	0.0406634,	3.42026,	4.15534)),

vector_utils::make_vector(
vector_utils::make_vector(-2.1,	-1.2,	0.2,	3.2,	-2.7),
vector_utils::make_vector(-1.4,	2.2,	0.3,	4.2,	-2.5),
vector_utils::make_vector(0.5,	1.2,	-0.1,	2.2,	2.9)),

vector_utils::make_vector(
vector_utils::make_vector(0.9,	-2.9,	-1.2,	2.4,	-2.5),
vector_utils::make_vector(-0.7,	-0.9,	0.0,	5.1,	-8.3),
vector_utils::make_vector(0.1,	-0.5,	-0.1,	19.9,	11.0)),

vector_utils::make_vector(
vector_utils::make_vector(1.0,	1.8,	0.0,	0.8,	2.5),
vector_utils::make_vector(0.5,	2.0,	0.8,	-0.6,	2.6),
vector_utils::make_vector(-0.4,	0.5,	1.1,	8.9,	11.0)));

const std::vector< std::vector<double> > dihedral_angle_coefficients_STD = vector_utils::make_vector(
vector_utils::make_vector( 0.3960648266256248 , 0.4778015421275076 , 0.1404857172922052 , 0.1306176954231868 , -0.0663646004926076 , 0.6368372402015872 ),
vector_utils::make_vector( 0.1769539713756307 , 0.3692802227577077 , 0.2091437872377169 , 0.1913852711909124 , 0.0596866314256868 , 0.7241998961047388 ),
vector_utils::make_vector( -0.0277768847874686 , 0.1878351967457690 , -0.2363656636502869 , 0.2126343233923858 , 0.2778522377186216 , 0.1438778040054098 ));
const std::vector< std::vector<double> > dihedral_angle_coefficients_GLY = vector_utils::make_vector(
vector_utils::make_vector( 0.4864763875098092 , 0.4169098831669225 , 0.2348973929731843 , 0.2576443711017197 , 0.1099509049657858 , 0.0000000000000000 ),
vector_utils::make_vector( 0.2353465526977265 , 0.2842275658626817 , -0.0211099172245951 , 0.1762756929941207 , 0.1410860963149856 , 0.0000000000000000 ),
vector_utils::make_vector( 0.0417890756901886 , 0.0925030379172491 , -0.2358528055654943 , 0.1582805707089231 , 0.4117375204162685 , 0.0000000000000000 ));
const std::vector< std::vector<double> > dihedral_angle_coefficients_PRO = vector_utils::make_vector(
vector_utils::make_vector( 0.4106708555264520 , 0.4819390303506603 , 0.0000000000000000 , 0.0000000000000000 , -0.0141746391470785 , 0.5496765676933106 ),
vector_utils::make_vector( 0.2242677600617599 , 0.4381989380648809 , 0.0000000000000000 , 0.0000000000000000 , 0.1017863282197456 , 0.7898445337153742 ),
vector_utils::make_vector( 0.0579211882516378 , 0.0899445202920860 , 0.0000000000000000 , 0.0000000000000000 , 0.4338489738287987 , 0.1205187987678361 ));

const std::vector< std::vector<double> > side_chain_ALA_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , -3.4713212362 , 0.0 , 0.0 , 0.0 , -4.03371047401e-10));  //  CB
const std::vector<AtomEnum> side_chain_ALA_atoms = vector_utils::make_vector( CB);

const std::vector< std::vector<double> > side_chain_ARG_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -1.03531050923e-11 ),  //  CB
vector_utils::make_vector( 0.0 , 1.11446737284 , 0.0 , 0.872527453389 , 0.0 , 0.0 ),  //  CG
vector_utils::make_vector( 0.0 , 0.816244335806 , 0.0 , 0.0 , 0.0 , 0.467044601879 ),  //  CD
vector_utils::make_vector( -0.0430367846259 , -2.88638408045 , 0.0 , 0.0024324800869 , -0.241574898855 , -3.65950929799 ),  //  NE
vector_utils::make_vector( 0.0 , 1.23860564144 , 0.0 , 0.0 , 0.0 , 1.63816505265 ),  //  CZ
vector_utils::make_vector( 0.0191117398481 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ),  //  NH2
vector_utils::make_vector( 0.0714607882387 , -1.94562320221 , 0.00858815825385 , -1.61050407974 , 0.0172898471359 , 1.33225475561 ),  //  HB1
vector_utils::make_vector( 0.0714607882387 , -1.94562320221 , 0.00858815825385 , -1.61050407974 , 0.0172898471359 , 1.33225475561 ),  //  HB2
vector_utils::make_vector( -0.0239777858545 , -0.24226518653 , -0.0352421962907 , -0.810112759198 , 0.0405181818607 , -0.156830656495 ),  //  HG1
vector_utils::make_vector( -0.0239777858545 , -0.24226518653 , -0.0352421962907 , -0.810112759198 , 0.0405181818607 , -0.156830656495 ),  //  HG2
vector_utils::make_vector( -0.00871362712689 , 0.320748206415 , 0.0121352679896 , -0.367063291071 , -0.0337978266234 , -0.204970811794 ),  //  HD1
vector_utils::make_vector( -0.00871362712689 , 0.320748206415 , 0.0121352679896 , -0.367063291071 , -0.0337978266234 , -0.204970811794 ),  //  HD2
vector_utils::make_vector( -0.00952853494255 , 1.23493238497 , -0.0173074088574 , -0.423682913363 , 0.0948721028635 , 1.1871343381));  //  HE
const std::vector<AtomEnum> side_chain_ARG_atoms = vector_utils::make_vector( CB, CG, CD, NE, CZ, NH2, HB2, HB3, HG2, HG3, HD2, HD3, HE);

const std::vector< std::vector<double> > side_chain_ASN_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -1.02791434406e-09 ),  //  CB
vector_utils::make_vector( -0.183170893084 , -13.4402878546 , 0.0 , -2.07590514409 , 0.0 , -2.2441664389 ),  //  CG
vector_utils::make_vector( -0.0327841254823 , 5.01241677844 , -0.0625137208002 , -0.4411606783 , -0.351623596802 , 0.0 ),  //  OD1
vector_utils::make_vector( 0.0 , 4.10410138558 , 0.0 , -0.09504336489 , 0.0 , 1.76656371222 ),  //  ND2
vector_utils::make_vector( 0.100685017355 , 0.676276893808 , 0.0245500105499 , -1.25636964386 , 0.138792958445 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.100685017355 , 0.676276893808 , 0.0245500105499 , -1.25636964386 , 0.138792958445 , 0.0));  //  HB2
const std::vector<AtomEnum> side_chain_ASN_atoms = vector_utils::make_vector( CB, CG, OD1, ND2, HB2, HB3);

const std::vector< std::vector<double> > side_chain_ASP_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 6.57650723449 , 0.0 , -3.86904673479 , 0.0 , -1.82520889657e-09 ),  //  CB
vector_utils::make_vector( 0.0 , -5.83223852837 , -0.0110423556333 , 4.543565917 , 0.0 , 0.42403040775 ),  //  CG
vector_utils::make_vector( -0.102593321506 , 1.64152303195 , -0.0778158053208 , -2.85721881167 , -0.196800498214 , -0.572828472065 ),  //  OD1
vector_utils::make_vector( -0.0972177814601 , 1.67683630389 , 0.00831444407059 , -2.68828144756 , -0.160742255169 , 0.799564949181 ),  //  OD2
vector_utils::make_vector( 0.121892290619 , -1.77876897637 , 0.0294314938147 , -0.0839806810365 , 0.00881768948368 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.121892290619 , -1.77876897637 , 0.0294314938147 , -0.0839806810365 , 0.00881768948368 , 0.0));  //  HB2
const std::vector<AtomEnum> side_chain_ASP_atoms = vector_utils::make_vector( CB, CG, OD1, OD2, HB2, HB3);

const std::vector< std::vector<double> > side_chain_CYS_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.31518529149e-09 ),  //  CB
vector_utils::make_vector( 0.0 , 0.0 , -0.00718723198401 , -0.989548882578 , -0.122230352072 , 0.0 ),  //  SG
vector_utils::make_vector( 0.0 , 0.0 , -0.00851619869805 , -2.30327254728 , -0.0245121416492 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.0 , 0.0 , -0.00851619869805 , -2.30327254728 , -0.0245121416492 , 0.0 ),  //  HB2
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -5.30723849196));  //  HG1
const std::vector<AtomEnum> side_chain_CYS_atoms = vector_utils::make_vector( CB, SG, HB2, HB3, HG);

const std::vector< std::vector<double> > side_chain_GLN_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -3.75252018162 , 0.0 , -2.95671985085e-11 ),  //  CB
vector_utils::make_vector( 0.0 , -0.456614258718 , 0.0 , -4.01550975281 , 0.0 , 17.3023434025 ),  //  CG
vector_utils::make_vector( 0.0 , 3.58838866256 , 0.0 , 6.90171110302 , 0.0 , -13.8469738198 ),  //  CD
vector_utils::make_vector( -0.0259782226579 , -1.02403319008 , -0.0870416987021 , -2.8876884785 , 0.0138941490625 , 4.56616558982 ),  //  OE1
vector_utils::make_vector( 0.00920930895911 , -1.01164987967 , 0.0 , -2.07990347484 , -0.0306655923957 , 3.94693048662 ),  //  NE2
vector_utils::make_vector( 0.0460136969189 , -2.18090660502 , 0.0038255270431 , -0.538439030258 , -0.126303238513 , 8.81885811057 ),  //  HB1
vector_utils::make_vector( 0.0460136969189 , -2.18090660502 , 0.0038255270431 , -0.538439030258 , -0.126303238513 , 8.81885811057 ),  //  HB2
vector_utils::make_vector( -0.0323310812764 , 0.74291817446 , 0.0268177189018 , 0.437708465156 , -0.00141858271069 , -8.82627729932 ),  //  HG1
vector_utils::make_vector( -0.0323310812764 , 0.74291817446 , 0.0268177189018 , 0.437708465156 , -0.00141858271069 , -8.82627729932));  //  HG2
const std::vector<AtomEnum> side_chain_GLN_atoms = vector_utils::make_vector( CB, CG, CD, OE1, NE2, HB2, HB3, HG2, HG3);

const std::vector< std::vector<double> > side_chain_GLU_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -0.377316229832 , 0.0 , -6.6562578029e-10 ),  //  CB
vector_utils::make_vector( 0.0 , -2.89342672812 , 0.0 , -4.97041127725 , 0.0 , 0.0 ),  //  CG
vector_utils::make_vector( 0.0 , 4.50008565016 , 0.0 , 5.29399006331 , 0.0 , -4.78327187836 ),  //  CD
vector_utils::make_vector( -0.0187234504936 , -1.38309478668 , -0.158967761851 , -2.18374376316 , 0.00611131629348 , 1.33252672237 ),  //  OE1
vector_utils::make_vector( -0.0240431350563 , -1.31993394802 , -0.107750497661 , -1.81048822194 , 0.139052667261 , 1.13465867345 ),  //  OE2
vector_utils::make_vector( 0.0534451603877 , -1.203442928 , 0.104330816638 , -1.10196170191 , -0.0804854771338 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.0534451603877 , -1.203442928 , 0.104330816638 , -1.10196170191 , -0.0804854771338 , 0.0 ),  //  HB2
vector_utils::make_vector( -0.00843186218028 , 1.01182454146 , 0.068776706444 , 0.498815541224 , -0.0505778188416 , 1.27995595533 ),  //  HG1
vector_utils::make_vector( -0.00843186218028 , 1.01182454146 , 0.068776706444 , 0.498815541224 , -0.0505778188416 , 1.27995595533));  //  HG2
const std::vector<AtomEnum> side_chain_GLU_atoms = vector_utils::make_vector( CB, CG, CD, OE1, OE2, HB2, HB3, HG2, HG3);

//FROM par.gly file
const std::vector< std::vector<double> > side_chain_GLY_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0599289840908 , -3.53032988169 , 0.0304210030403 , 1.38032425626 , 0.465339465619 , 0.0 ));  //  HA2
const std::vector<AtomEnum> side_chain_GLY_atoms = vector_utils::make_vector( HA2); //Must be HA2 in Phaistos!!

const std::vector< std::vector<double> > side_chain_HIS_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 1.82830325357 , 0.0 , -16.9291535085 , 0.0 , 1.09880622641e-09 ),  //  CB
vector_utils::make_vector( -0.153075416471 , -2.61944587024 , 0.0 , 2.43340067277 , 0.0 , 0.0 ),  //  CG
vector_utils::make_vector( 0.0 , -0.419947401913 , 0.0 , -2.88666727557 , 0.0 , 0.0 ),  //  ND1
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -3.68870141246 ),  //  CD2
vector_utils::make_vector( 0.0 , -4.92310183027 , 0.0 , 0.0 , 0.0 , 0.0 ),  //  NE2
vector_utils::make_vector( 0.066781519345 , -4.50333656372 , 0.022492277865 , 2.86581859294 , 0.0057743713673 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.066781519345 , -4.50333656372 , 0.022492277865 , 2.86581859294 , 0.0057743713673 , 0.0 ),  //  HB2
vector_utils::make_vector( 0.0 , 7.9189162559 , -0.0302490130949 , -0.775471589614 , -0.0588563626968 , 2.61568966021 ),  //  HD1
vector_utils::make_vector( 0.0 , 7.9189162559 , -0.0302490130949 , -0.775471589614 , -0.0588563626968 , 2.61568966021 ),  //  HD2
vector_utils::make_vector( 0.0 , -2.20280531486 , -0.0142549703918 , 3.2003381435 , 0.0239426526044 , -1.58410948627));  //  HE1
const std::vector<AtomEnum> side_chain_HIS_atoms = vector_utils::make_vector( CB, CG, ND1, CD2, NE2, HB2, HB3, HD1, HD2, HE1);

const std::vector< std::vector<double> > side_chain_ILE_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -1.96481052694e-10 ),  //  CB
vector_utils::make_vector( 0.0 , -1.66488560778 , 0.0 , 0.0 , 0.0 , 28.0479128104 ),  //  CG1
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 30.3726662011 ),  //  CD
vector_utils::make_vector( 0.0 , 1.29700467785 , 0.0 , -4.71851827233 , 0.0 , 22.657752454 ),  //  HB
vector_utils::make_vector( -0.0111564636628 , 0.0 , -0.000638523964496 , -0.506705876815 , -0.180421602653 , -33.3863363183 ),  //  HG11
vector_utils::make_vector( -0.0111564636628 , 0.0 , -0.000638523964496 , -0.506705876815 , -0.180421602653 , -33.3863363183));  //  HG12
const std::vector<AtomEnum> side_chain_ILE_atoms = vector_utils::make_vector( CB, CG1, CD1, HB, HG12, HG13);

const std::vector< std::vector<double> > side_chain_LEU_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 3.51794597314 , 0.0 , 0.0 , 0.0 , -8.91936991364e-10 ),  //  CB
vector_utils::make_vector( 0.0 , 3.88613855384 , -0.0712585733415 , -1.83168322005 , 0.0 , 0.0 ),  //  CG
vector_utils::make_vector( 0.00245439278859 , -3.5176338264 , 0.0203020521122 , -2.00872784258 , -0.238336770306 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.00245439278859 , -3.5176338264 , 0.0203020521122 , -2.00872784258 , -0.238336770306 , 0.0 ),  //  HB2
vector_utils::make_vector( 0.0 , -0.709602436933 , 0.00228804372959 , 0.0301226983886 , 0.1279976817 , 0.544387507169));  //  HG1
const std::vector<AtomEnum> side_chain_LEU_atoms = vector_utils::make_vector( CB, CG, HB2, HB3, HG);

const std::vector< std::vector<double> > side_chain_LYS_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -6.30608435036 , 0.0 , 9.75761233655e-10 ),  //  CB
vector_utils::make_vector( 0.0 , -0.361390657843 , 0.0 , 1.65825293028 , 0.0 , -11.6109579883 ),  //  CG
vector_utils::make_vector( 0.0 , 1.42931928849 , 0.0 , -0.51010930012 , 0.0 , -0.14317680276 ),  //  CD
vector_utils::make_vector( 0.0 , -2.14588385153 , 0.0 , 0.0 , 0.0 , -0.701125918268 ),  //  CE
vector_utils::make_vector( 0.0 , 0.552820632793 , 0.0 , 0.0 , -0.0459614371365 , 0.185543226303 ),  //  NZ
vector_utils::make_vector( 0.0464037003472 , -1.36084749724 , -0.00655416308051 , 0.0779635914533 , -0.0536679540163 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.0464037003472 , -1.36084749724 , -0.00655416308051 , 0.0779635914533 , -0.0536679540163 , 0.0 ),  //  HB2
vector_utils::make_vector( -0.02597340034 , 0.236013218495 , -0.0174148989543 , -0.785687454858 , 0.00151360921447 , 4.47148787915 ),  //  HG1
vector_utils::make_vector( -0.02597340034 , 0.236013218495 , -0.0174148989543 , -0.785687454858 , 0.00151360921447 , 4.47148787915 ),  //  HG2
vector_utils::make_vector( -0.0118797877716 , -0.0534136566698 , 0.00767676351305 , 0.0678926181782 , 0.0212682285098 , -0.0186077518884 ),  //  HD1
vector_utils::make_vector( -0.0118797877716 , -0.0534136566698 , 0.00767676351305 , 0.0678926181782 , 0.0212682285098 , -0.0186077518884 ),  //  HD2
vector_utils::make_vector( 0.00222526395378 , 0.599469738054 , -0.0125535881158 , -0.0203757793151 , -0.00986667749524 , 0.24546779373 ),  //  HE1
vector_utils::make_vector( 0.00222526395378 , 0.599469738054 , -0.0125535881158 , -0.0203757793151 , -0.00986667749524 , 0.24546779373));  //  HE2
const std::vector<AtomEnum> side_chain_LYS_atoms = vector_utils::make_vector( CB, CG, CD, CE, NZ, HB2, HB3, HG2, HG3, HD2, HD3, HE2, HE3);

const std::vector< std::vector<double> > side_chain_MET_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -1.10478068502e-09 ),  //  CB
vector_utils::make_vector( 0.0 , -0.645923355948 , -0.652553325489 , 0.0 , 0.0 , 0.0 ),  //  CG
vector_utils::make_vector( -0.16364830972 , 2.83511129497 , 0.13644559576 , 1.28231605991 , -0.0427727642165 , -6.35909454157 ),  //  SD
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -0.545766241509 , 0.0 , 0.0 ),  //  CE
vector_utils::make_vector( 0.137756130224 , -3.78151434563 , 0.0148497085195 , -2.24703600476 , -0.0459649511504 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.137756130224 , -3.78151434563 , 0.0148497085195 , -2.24703600476 , -0.0459649511504 , 0.0 ),  //  HB2
vector_utils::make_vector( -0.00849847825403 , 0.943125169888 , 0.18339726423 , -0.991317041911 , 0.0799359869328 , 4.30426538868 ),  //  HG1
vector_utils::make_vector( -0.00849847825403 , 0.943125169888 , 0.18339726423 , -0.991317041911 , 0.0799359869328 , 4.30426538868));  //  HG2
const std::vector<AtomEnum> side_chain_MET_atoms = vector_utils::make_vector( CB, CG, SD, CE, HB2, HB3, HG2, HG3);

const std::vector< std::vector<double> > side_chain_PHE_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , -0.0108481964591 , -7.13951201419 , 1.6285523119 , 1.63464800208e-10 ),  //  CB
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.90720639743 , 0.0 , 0.0 ),  //  CZ
vector_utils::make_vector( 0.0 , -0.346976381608 , -0.0321609673341 , -0.802154239826 , -0.824840492786 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.0 , -0.346976381608 , -0.0321609673341 , -0.802154239826 , -0.824840492786 , 0.0));  //  HB2
const std::vector<AtomEnum> side_chain_PHE_atoms = vector_utils::make_vector( CB, CZ, HB2, HB3);

//FROM par.pro files
const std::vector< std::vector<double> > side_chain_PRO_data = vector_utils::make_vector(
vector_utils::make_vector( 0.766315854944 , -6.67483104488 , 0.0 , 0.0 , -6.53301390511 , 4.61158587977e-10 ),  //  CB
vector_utils::make_vector( -1.06933191871 , -4.45177134585 , 0.0 , 0.0 , -9.05663273631 , 37.2196860372 ),  //  CG
vector_utils::make_vector( 0.513746061748 , -1.50489128089 , 0.0 , 0.0 , -3.77912191871 , 3.97232248492 ),  //  CD
vector_utils::make_vector( -0.785691570236 , 0.198962501194 , 0.0 , 0.0 , 2.30727040717 , 21.046668963 ),  //  HB1
vector_utils::make_vector( -0.785691570236 , 0.198962501194 , 0.0 , 0.0 , 2.30727040717 , 21.046668963 ),  //  HB2
vector_utils::make_vector( 0.644202991836 , 2.03227333337 , 0.0 , 0.0 , 3.81406346752 , -21.4484437153 ),  //  HG1
vector_utils::make_vector( 0.644202991836 , 2.03227333337 , 0.0 , 0.0 , 3.81406346752 , -21.4484437153 ),  //  HG2
vector_utils::make_vector( -0.137795776966 , 1.54573355392 , 0.0 , 0.0 , 2.03922840659 , -2.86174390751 ),  //  HD1
vector_utils::make_vector( -0.137795776966 , 1.54573355392 , 0.0 , 0.0 , 2.03922840659 , -2.86174390751 ));  //  HD2
const std::vector<AtomEnum> side_chain_PRO_atoms = vector_utils::make_vector( CB, CG, CD, HB2, HB3, HG2, HG3, HD2, HD3);

const std::vector< std::vector<double> > side_chain_SER_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 1.79407270536 , 0.0 , 0.0 , 0.0 , 1.40305678357e-12 ),  //  CB
vector_utils::make_vector( -0.113051836575 , 0.793923501464 , -0.558025317975 , -8.01062342831 , -3.38102218137 , 0.0 ),  //  OG
vector_utils::make_vector( 0.0652575203998 , -1.3559362377 , -0.0265320022 , -1.36351244674 , -0.0776100488467 , -4.55176284981 ),  //  HB1
vector_utils::make_vector( 0.0652575203998 , -1.3559362377 , -0.0265320022 , -1.36351244674 , -0.0776100488467 , -4.55176284981 ),  //  HB2
vector_utils::make_vector( -0.00878828423241 , 0.0 , 0.458618591127 , 4.4828757499 , 2.98258179417 , 6.08562260172));  //  HG1
const std::vector<AtomEnum> side_chain_SER_atoms = vector_utils::make_vector( CB, OG, HB2, HB3, HG);

const std::vector< std::vector<double> > side_chain_THR_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 8.13812368131 , 0.0 , 2.3915263035e-12 ),  //  CB
vector_utils::make_vector( -0.0535247676171 , -2.00769271973 , 0.0281539908539 , -4.67975420411 , -0.655624096407 , 1.23187775141 ),  //  OG1
vector_utils::make_vector( 0.0 , 2.80742004172 , 0.0 , 0.0 , 0.0 , 0.0 ),  //  CG2
vector_utils::make_vector( 0.04445648824 , -1.88339667766 , -0.0463286732656 , -6.9078573272 , 0.475330611684 , 0.0));  //  HB
const std::vector<AtomEnum> side_chain_THR_atoms = vector_utils::make_vector( CB, OG1, CG2, HB);

const std::vector< std::vector<double> > side_chain_TRP_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -3.61890896893e-12 ),  //  CB
vector_utils::make_vector( 0.0 , 12.3509849143 , 0.0 , 0.0 , 0.0 , 0.0 ),  //  CD2
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 6.21717953851 ),  //  NE1
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -7.9272256977 , 0.0 , 0.0 ),  //  CE2
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 9.08877429759 , 0.0 , 0.0 ),  //  CE3
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -5.04256744009 , 0.0 , -2.93570158516 ),  //  CZ2
vector_utils::make_vector( 0.00929384945248 , -0.421493841927 , 0.103332157035 , -1.80682074242 , -0.226833124881 , 0.0 ),  //  HB1
vector_utils::make_vector( 0.00929384945248 , -0.421493841927 , 0.103332157035 , -1.80682074242 , -0.226833124881 , 0.0 ),  //  HB2
vector_utils::make_vector( -0.215472755574 , 12.5022417653 , -0.401058528252 , -8.51144121319 , 0.0953496726981 , 0.0279604764831 ),  //  HD1
vector_utils::make_vector( 0.0 , -11.9436476252 , 0.370070105302 , 14.3661544338 , 0.0 , -5.32742492601 ),  //  HE1
vector_utils::make_vector( -0.387382770229 , 0.0 , -0.297531376905 , -5.7956769123 , 0.0 , -1.18319148206 ),  //  HE3
vector_utils::make_vector( 0.0 , -7.57517906396 , 0.0 , 0.0 , 0.0 , 1.15100135153 ),  //  HZ2
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 2.60021425436 ),  //  HZ3
vector_utils::make_vector( 0.327714650343 , 3.88836256761 , 0.0 , 0.0 , 0.0876171296868 , 0.0 ));  //  HH2
const std::vector<AtomEnum> side_chain_TRP_atoms = vector_utils::make_vector( CB, CD2, NE1, CE2, CE3, CZ2, HB2, HB3, HD1, HE1, HE3, HZ2, HZ3, HH2);

const std::vector< std::vector<double> > side_chain_TYR_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -10.6970183542 , 0.0 , 2.83653011196e-12 ),  //  CB
vector_utils::make_vector( 0.0 , 2.96756007 , 0.0 , 5.09554633209 , 0.0 , 0.0 ),  //  CG
vector_utils::make_vector( 0.0 , -1.66791262959 , 0.0 , 0.0 , 0.0 , 0.0 ),  //  CD2
vector_utils::make_vector( 0.0158654945788 , -3.67150867964 , 0.0 , -1.46107158447 , 0.0 , -0.020959848634 ),  //  OH
vector_utils::make_vector( 0.0 , 4.8082254581 , -0.0116527339907 , 0.457916534236 , -0.0937108309252 , 0.0070312669555 ),  //  HB1
vector_utils::make_vector( 0.0 , 4.8082254581 , -0.0116527339907 , 0.457916534236 , -0.0937108309252 , 0.0070312669555));  //  HB2
const std::vector<AtomEnum> side_chain_TYR_atoms = vector_utils::make_vector( CB, CG, CD2, OH, HB2, HB3);

const std::vector< std::vector<double> > side_chain_VAL_data = vector_utils::make_vector(
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , -1.97923732755 , 0.0 , -5.05953063116e-12 ),  //  CB
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.349675629467 ),  //  CG1
vector_utils::make_vector( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.349675629467 ),  //  CG2
vector_utils::make_vector( 0.0 , -0.752456959203 , -0.0188545119448 , -4.27891949771 , -0.544414888703 , 0.0 ));  //  HB
const std::vector<AtomEnum> side_chain_VAL_atoms = vector_utils::make_vector( CB, CG1, CG2, HB);

//COIL -- OK !
const std::vector< std::vector<double> > random_coil_data = vector_utils::make_vector( 
vector_utils::make_vector( 4.432847,  52.266440,  8.24,  123.8,  177.1,  19.0, -0.20),
vector_utils::make_vector( 4.350150,  56.240260,  8.23,  120.5,  176.5,  30.3,  1.45),
vector_utils::make_vector( 4.806587,  53.309020,  8.30,  118.7,  175.5,  39.0,  1.15),
vector_utils::make_vector( 4.725179,  54.158222,  8.34,  120.4,  177.2,  40.8,  1.18),
vector_utils::make_vector( 4.650000,  57.791772,  8.32,  118.6,  175.1,  41.8,  2.43),
vector_utils::make_vector( 4.405826,  56.062813,  8.32,  119.8,  176.3,  30.1,  1.57),
vector_utils::make_vector( 4.364552,  56.503798,  8.42,  120.2,  176.1,  29.7,  1.80),
vector_utils::make_vector( 3.970000,  45.486533,  8.33,  108.8,  173.6,   0.0,  1.07),
vector_utils::make_vector( 4.615947,  55.660394,  8.32,  118.2,  175.1,  32.0,  1.20),
vector_utils::make_vector( 4.193333,  61.206185,  8.05,  119.9,  176.8,  37.5,  4.14),
vector_utils::make_vector( 4.402746,  54.957697,  8.16,  121.8,  177.1,  41.9,  1.50),
vector_utils::make_vector( 4.368070,  56.243301,  8.29,  120.4,  176.5,  32.3,  1.55),
vector_utils::make_vector( 4.461933,  55.367000,  8.28,  119.6,  175.5,  32.8,  1.33),
vector_utils::make_vector( 4.430244,  57.646240,  8.30,  120.3,  175.8,  39.3,  1.25),
vector_utils::make_vector( 4.658447,  63.066266,  0.00,    0.0,  176.0,  31.7,  0.60),
vector_utils::make_vector( 4.504638,  58.144025,  8.31,  115.7,  173.7,  62.7,  2.59),
vector_utils::make_vector( 4.324869,  62.542020,  8.15,  113.6,  175.2,  68.1,  3.20),
vector_utils::make_vector( 4.412784,  56.208648,  8.15,  121.3,  175.8,  28.3,  1.64),
vector_utils::make_vector( 4.339301,  57.338180,  8.12,  120.3,  175.7,  38.7,  1.75),
vector_utils::make_vector( 4.086605,  62.512466,  8.03,  119.2,  177.1,  31.7,  3.83));

const std::vector< std::vector<double> > backbone_distances_data_STD = vector_utils::make_vector( 
vector_utils::make_vector(0.10495380090732243, 00.000000000, 0.08675460835995771, 00.000000000, -0.35325986523300673, 00.000000000, -0.23275377251201915, 00.000000000, -5.367031470580472e-13, 00.000000000, 0.17447583678230483, 00.000000000, 0.14871171068329672, -0.053296746569885985, 0.03882038067484881, 0.11174638829048561),
vector_utils::make_vector(-0.5514491272711721, -0.317165242562441, -2.2950957826753307, 5.038915848408274, -0.9486055559477894, 00.000000000, 3.9203989031538184, -1.9490589173162214e-10, 7.888410038586696, 6.211182450143531, 3.696581556678636, 0.8900045157214647, 1.0575798185417868, 0.843178315332479, -0.006841941314662635, 0.5577505622026423),
vector_utils::make_vector(-0.7220064276597629, 0.718428078157317, -1.2431488450135015, 00.000000000, 00.000000000, 00.000000000, 1.4040337379295934e-11, 00.000000000, 0.06477265674883699, 0.3561690255620862, -0.5820468821370581, -0.4391425656607752, 00.000000000, 0.3153333333421696, -0.04764241032826434, -0.03674562604899119),
vector_utils::make_vector(-0.9896087901749597, 00.000000000, -3.3287316816428802, 10.74798119339772, -1.6351734790157095, -4.716497136294274e-10, -3.5391268117345294, -15.905456499801042, -2.188220081012427, 1.7859755656813219, 4.226242224034082, 1.0503017607250316, 4.169602548794144, -3.515118468842189, 0.7841272708579441, 0.049269118119305705),
vector_utils::make_vector(-0.0335256937556629, -0.3228718094361184, -0.3565204453816248, 00.000000000, -0.40079984897073373, 00.000000000, -0.34221964670495214, 00.000000000, 00.000000000, -4.0706993336807334e-11, 00.000000000, 00.000000000, 00.000000000, -1.4947525215073552, -0.19452341501188974, -0.8447972445280089),
vector_utils::make_vector(-0.2954355834730914, -0.1651180756238783, 0.41374535951234304, -1.203366917902715, 0.9872423059576032, 3.605111738963296, -0.7675619677317889, 00.000000000, 1.5204107711708694, -5.792235516845152, 1.2120660376313594, 1.1441298857285918, 0.9460462905709635, -2.4318195762095236, 0.129054286671938, 0.11095702467304198));

const std::vector< std::vector<double> > backbone_distances_data_GLY = vector_utils::make_vector( 
vector_utils::make_vector(0.06631745549753744, 00.000000000, 0.08053716893343965, 00.000000000, -0.3009441311219224, 00.000000000, -0.16296608795780956, 00.000000000, 3.3857048090857263e-12, 00.000000000, 0.09893327039437384, 00.000000000, 0.13311142001205686, 0.0646256499482128, 0.022134597201919272, 0.10541014389184017),
vector_utils::make_vector(-0.4879557763604076, -0.5317572323214436, -1.7137741845968946, 3.8804893083829817, -1.0573318803614427, 00.000000000, 2.8169776432915232, 1.912141415671544e-10, 6.631387540142962, 6.784605289137453, 3.99731663680024, -1.501909262082764, 0.799569167794496, 1.0488699289637873, -0.0029700727148061976, 0.5482871837173448),
vector_utils::make_vector(-0.679173951206218, 0.701488775320716, -1.060191763327514, 00.000000000, 00.000000000, 00.000000000, 3.6845120223754645e-11, 00.000000000, 0.013594402092441192, 0.5119418768961913, -0.9571200316970434, -0.9095434400348369, 00.000000000, 0.4474430201629445, -0.05667327928869355, -0.07326226743125924),
vector_utils::make_vector(-0.7475809368920289, 00.000000000, -3.781128710004096, 11.66107199740856, -2.1254722731357547, -4.019029640104203e-10, 15.246462442197771, -18.048166285757972, 8.37603666503838, 12.006109837717329, 3.470376456985657, 1.121351440643303, 3.980486576118014, -2.8770605647188794, 0.6644561949367181, -0.07032697207803783),
vector_utils::make_vector(-0.03739789399178936, -0.944159163796027, -0.3017085222427726, 00.000000000, -0.06359569943611086, 00.000000000, 0.38139891617017474, 00.000000000, 00.000000000, 9.832908543176506e-13, 00.000000000, 00.000000000, 00.000000000, -1.2155089757457618, -0.22522194899955364, -0.9356821071921098),
vector_utils::make_vector(00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000));

const std::vector< std::vector<double> > backbone_distances_data_PRO = vector_utils::make_vector(
vector_utils::make_vector(0.029778246799008194, 00.000000000, -0.019426074077176978, 00.000000000, -0.21395261150083003, 00.000000000, 00.000000000, 00.000000000, -1.8801788463747944e-12, 00.000000000, 0.04660542550394054, 00.000000000, 0.20799508398644603, 0.027182338394192495, 0.03319146178253968, 0.11439575857380795),
vector_utils::make_vector(-0.30848010984531415, 0.8047904559494001, -2.0300362133645518, 1.322273879181291, -0.7680868996344696, 00.000000000, 00.000000000, 8.84516624947276e-11, 7.724755040630422, 1.79331128214807, 7.903990757611555, 3.907903162879867, 1.181901936658844, 0.7888303756384959, 0.05881553902472262, 0.5778966638783823),
vector_utils::make_vector(00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000),
vector_utils::make_vector(00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000, 00.000000000),
vector_utils::make_vector(0.05702032123333377, 0.4554951513452361, -0.3650702372708477, 00.000000000, 0.02102645769671279, 00.000000000, 00.000000000, 00.000000000, 00.000000000, -2.1626856169656322e-11, 00.000000000, 00.000000000, 00.000000000, -1.1011533255796955, -0.18369457999328184, -0.860993004604592),
vector_utils::make_vector(-0.24836452024646163, -1.6788780426299816, 0.23735974523480674, -0.47739408747956574, 1.123212364506351, 1.6993985071893223, 00.000000000, 00.000000000, 1.1821666485851137, -4.7668417181918645, 0.9686944837631483, 0.491031472934839, 1.265528030390079, -2.265116669883977, 0.13347911544135715, 0.0968466579437965));


//FLATBTM -- OK!
const std::vector< std::vector<double> > flat_bottom_limit = vector_utils::make_vector(vector_utils::make_vector(0.2732537, 1.1511320, 0.5061659, 2.8999911, 1.2745616, 1.3020818),
                                                                                       vector_utils::make_vector(0.2903572, 1.1457984, 0.5156310, 2.9764442, 1.2908505, 0.0000000),
                                                                                       vector_utils::make_vector(0.2768943, 1.1454787, 0.0000000, 0.0000000, 1.2770539, 1.2910034));
//SCALEHARM -- OK!
const std::vector<double> scale_harmonic_potential = vector_utils::make_vector(0.47, 2.36, 0.62, 4.18, 1.95, 1.91);
//ENDHARM -- OK!
const std::vector<double> end_harmonic_potential = vector_utils::make_vector(4.0, 20.0, 4.0, 20.0, 20.0, 20.0);



}// End namespace camshift_constants

#endif
